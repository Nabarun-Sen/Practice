#make a list of cubes
cubes=[]
for i in range(11):
    cubes.append(i**3)
print("Cubes of numbers from 1-10",cubes)
print()

"""python supports computed lists called list comprehension
Syntax: List=[expression for variable in sequence]
Every list comprehension in Python includes three elements:
1.expression is the member itself, a call to a method, or any other valid
expression that returns a value. In the example below, the expression i * 3
is the square of the member value.
2.member is the object or value in the list or iterable. In the example above,
the member value is i.
3.iterable is a list, set, sequence, generator, or any other object that
can return its elements one at a time. In the example below, the iterable is
range(11).
An iterable is an object that can be used repeatedly in subsequent loop
statements """
#Empty list L=list()
cubes2=[i**3 for i in range(11)]
print(cubes2)
print()
#combine and print using list comprehension
print([(x,y) for x in [10,20,30] for y in [30,10,40] if x!=y])
print()
#sum and mean of elements in a list
num_list=[1,2,3,4,5,6,7,8]
sum=0
for i in num_list:
    sum+=1
print("Sum of elements in the list=",sum)
print("Average of elements in the list= ",float(sum/float(len(num_list))))
print()
"""enumerate():enumerate() function returns an enumerate object which
contains the index and value of all the items of the list as a tuple"""
#enumerate() function
num_list=[1,2,3,4,5]
for index,i in enumerate(num_list):
    print(i,"is at index :",index)
print()
"""An iterator is often used to wrap an iterable and return each item of
interest.All iterators are iterable,but all iterables are not iterators.
An iterator can only be used in a single for loop,whereas an iterable
can be used repeatedly in subsequent for loops"""
#print the elements using iterator
num_list=[1,2,3,4,5]
it=iter(num_list)
for i in range(len(num_list)):
    print("Element at index",i,"is :",next(it))
print()
"""filter() function constructs a list from those elements of the list for which
a function returns True.
Syntax:filter(function,sequence/iterator/List)
The filter() function returns a sequence that contains items from the for which
the function is True.If sequence is a string,Unicode,or tuple,then the result
will be of the same type otherwise,it is always a list."""
#filter function
def check(x):
    if(x%2==0 or x%4==0):
        return 1
#call check() for every value between 2 to 21
evens=list(filter(check,range(2,22)))
print(evens)
print()

"""map() function applies a particular function to every element of a list.
Syntax:map(function,sequence)
The operation that map() performs is commonly known as a mapping because
it maps every item in an input iterable to a new item in a resulting iterable.
To do that, map() applies a transformation function to all the items in
the input iterable.
To better understand map(), suppose you need to take a list of numeric values
and transform it into a list containing the square value of every number in
the original list. In this case, you can use a for loop and
code something like this:"""
#without map function
numbers = [1, 2, 3, 4, 5]
squared = []

for num in numbers:
    squared.append(num ** 2)
print(squared)
#[1, 4, 9, 16, 25]

#with map function
def square(number):
    return number ** 2
numbers = [1, 2, 3, 4, 5]
squared = map(square, numbers)
print(list(squared))
#[1, 4, 9, 16, 25]

#map function
def add_2(x):
    x+=2
    return x
num_list=[1,2,3,4,5,6,7]
print("original list is :",num_list)
new_list=list(map(add_2,num_list))
print("Modified list is :",new_list)
print()

"""The reduce() function with syntax as given below returns a single value
generated by calling the function on the first two items of the sequence,then on
the result and the next item,and so on.
Syntax:reduce(function,sequence)
Working : 
1.At first step, first two elements of sequence are picked and the result is
obtained.
2.Next step is to apply the same function to the previously attained result 
and the number just succeeding the second element and the result is again stored.
3.This process continues till no more elements are left in the container.
4.The final returned result is returned and printed on console."""
import functools#functools is a module that contains the function reduce()
num_list=[1,2,3,4,5,6,7]
print("Sum of values in list=")
print(functools.reduce(lambda a,b:a+b,num_list))
print()





    







